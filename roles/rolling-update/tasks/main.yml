---
#tasks file for nginx
- name: Get target health info from ELB Target Group
  community.aws.elb_target_group_info:
    target_group_arn: "{{ target_group_arn }}"
    region: "{{ aws_region }}"
  register: target_info

- name: Set list of healthy instance IDs
  set_fact:
    target_instances: >-
      {{
        target_info.target_group_health_descriptions
        | selectattr('TargetHealth.State','equalto','healthy')
        | map(attribute='Target.Id') | list
      }}

- name: Split servers into two batches
  set_fact:
    group1: "{{ target_instances[0::2] }}"
    group2: "{{ target_instances[1::2] }}"

- name: Rolling update group 1
  include_tasks: roles/nginx/tasks/main.yml
  loop: "{{ group1 }}"
  loop_control:
    loop_var: target_host

- name: Wait for group 1 instances to be healthy
  shell: |
    for i in {1..10}; do
      STATUS=$(aws elbv2 describe-target-health \
        --region {{ aws_region }} \
        --target-group-arn {{ target_group_arn }} \
        --query "TargetHealthDescriptions[?Target.Id=='{{ item }}'].TargetHealth.State" \
        --output text)
      echo "Health status: $STATUS"
      if [ "$STATUS" = "healthy" ]; then
        echo "Instance {{ item }} is healthy!"
        exit 0
      fi
      sleep 10
    done
    echo "Timeout waiting for instance {{ item }}"
    exit 1
  loop: "{{ group1 }}"
  register: health_results_group1
  failed_when: health_results_group1.results | selectattr('rc', 'ne', 0) | list | length > 0

- name: Rolling update group 2
  include_tasks: roles/nginx/tasks/main.yml
  loop: "{{ group2 }}"
  loop_control:
    loop_var: target_host

- name: Wait for group 2 instances to be healthy
  shell: |
    for i in {1..10}; do
      STATUS=$(aws elbv2 describe-target-health \
        --region {{ aws_region }} \
        --target-group-arn {{ target_group_arn }} \
        --query "TargetHealthDescriptions[?Target.Id=='{{ item }}'].TargetHealth.State" \
        --output text)
      echo "Health status: $STATUS"
      if [ "$STATUS" = "healthy" ]; then
        echo "Instance {{ item }} is healthy!"
        exit 0
      fi
      sleep 10
    done
    echo "Timeout waiting for instance {{ item }}"
    exit 1
  loop: "{{ group2 }}"
  register: health_results_group2
  failed_when: health_results_group2.results | selectattr('rc', 'ne', 0) | list | length > 0