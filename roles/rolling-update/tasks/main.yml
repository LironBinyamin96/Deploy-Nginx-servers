---
#tasks file for nginx

- name: Install Nginx
  apt:
    name: nginx
    state: latest
    update_cache: yes

- name: Get Nginx port from local Consul
  uri:
    url: "http://consul:8500/v1/kv/port-Nginx?raw"
    return_content: yes
  register: nginx_port_response
  delegate_to: localhost
  become: false

- name: Set Nginx port fact
  set_fact:
    nginx_port: "{{ nginx_port_response.content }}"

- name: Show which port will be used for Nginx
  debug:
    msg: "Nginx will run on port {{ nginx_port }}"

- name: Deploy nginx.conf rendered with the selected port
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/sites-available/default
    owner: root
    group: root
    mode: '0644'
  notify: Restart Nginx

- name: Split servers into two batches
  set_fact:
    group1: "{{ ansible_play_hosts_all[0::2] }}"
    group2: "{{ ansible_play_hosts_all[1::2] }}"

- name: Rolling update group 1
  include_tasks: rolling_update.yml
  loop: "{{ group1 }}"
  loop_control:
    loop_var: target_host

- name: Check health for group 1
  uri:
    url: "http://{{ hostvars[item].ansible_host }}:{{ nginx_port }}/health"
    method: GET
    status_code: 200
  loop: "{{ group1 }}"
  register: health_results_group1

- name: Fail if any group 1 server is unhealthy
  fail:
    msg: "Server {{ item.item }} failed health check."
  when: item.status != 200
  loop: "{{ health_results_group1.results }}"

- name: Rolling update group 2
  include_tasks: rolling_update.yml
  loop: "{{ group2 }}"
  loop_control:
    loop_var: target_host

- name: Check health for group 2
  uri:
    url: "http://{{ hostvars[item].ansible_host }}:{{ nginx_port }}/health"
    method: GET
    status_code: 200
  loop: "{{ group2 }}"
  register: health_results_group2

- name: Fail if any group 2 server is unhealthy
  fail:
    msg: "Server {{ item.item }} failed health check."
  when: item.status != 200
  loop: "{{ health_results_group2.results }}"
